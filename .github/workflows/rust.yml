# based on: 
# https://ectobit.com/blog/speed-up-github-actions-rust-pipelines/
name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  #SCCACHE_GHA_ENABLED: "true"
  #RUSTC_WRAPPER: "sccache"
  RUSTFLAGS: -C instrument-coverage=all
  RUST_UP_DEFAULT: nightly-2023-05-01
  CARGO_TERM_COLOR: always
  # note you will find ~/.cargo/bin/ for caching but that we resolve using preperation
  CARGO_CACHE_PATH:  |
    ~/.cargo/registry/index/
    ~/.cargo/registry/cache/
    ~/.cargo/git/db/
    target/   
  RUSTUP_CACHE_PATH:  |
    ~/.rustup
    ~/.cargo/bin/   
  # NOTE: if you change COMPONENT, also increase the CACHE_VERSION!
  # related: https://rust-lang.github.io/rustup-components-history/
  COMPONENT: clippy,rustfmt,miri 
  CACHE_VERSION: 29


jobs:
  rustup:
    runs-on: ubuntu-latest
    steps:
      # inpiration from: https://github.com/johnthagen/min-sized-rust
      #- run: mkdir -p ~/.cargo
      #- run: echo -e "[profile.min]\ninherits = \"release\"\nstrip = true\nopt-level = \"z\"\ncodegen-units = 1" > ~/.cargo/config.toml
      #- run: cat ~/.cargo/config.toml
      - if: ${{ !env.ACT }}
        name: Cache Rust compilation
        uses: metalbear-co/sccache-action@v1.1.0
        with:
         github-token: ${{ secrets.GITHUB_TOKEN }}     
      - id: cache-rustup
        name: Cache Rust toolchain
        uses: actions/cache@v3
        with:
          path: ${{ env.RUSTUP_CACHE_PATH }}
          key: toolchain-${{ env.RUST_UP_DEFAULT }}-v${{ env.CACHE_VERSION }}-
      - if: ${{ steps.cache-rustup.outputs.cache-hit != 'true' }}
        run: |
            rustup toolchain install ${{ env.RUST_UP_DEFAULT }} --profile minimal --component ${{ env.COMPONENT }}
            rustup default ${{ env.RUST_UP_DEFAULT }}  
      - name: Install cargo-build-dependencies, grcov
        if: ${{ steps.cache-rustup.outputs.cache-hit != 'true' }}
        run: |
             cargo install cargo-build-dependencies
             cargo install grcov
      - name: Show available bins, remove non used to spare some room
        run: | 
             echo "rm rust-gdb";rm ~/.cargo/bin/rust-gdb ||:
             echo "rm rust-gdbgui";rm ~/.cargo/bin/rust-gdbgui ||:
             ls -1lh ~/.cargo/bin/
             

      #- name: Run sccache stat for check
      #  shell: bash
      #  run: ${RUSTC_WRAPPER} --show-stats
    
          
  dependencies:
    runs-on: ubuntu-latest
    needs: rustup
    steps:
    - id: cache-rustup
      name: Obtain Rust toolchain
      uses: actions/cache/restore@v3
      with:
          path: ${{ env.RUSTUP_CACHE_PATH }}
          key: toolchain-${{ env.RUST_UP_DEFAULT }}-v${{ env.CACHE_VERSION }}-
          fail-on-cache-miss: true # does not brake the build ?
    - if: ${{ steps.cache-rustup.outputs.cache-hit != 'true' }}
      run: echo 'Failed to retrieve cache';exit 1
    - if: ${{ !env.ACT }}
      name: Cache Rust compilation
      uses: metalbear-co/sccache-action@v1.1.0
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
    - uses: actions/checkout@v4
    - run: echo $RUSTFLAGS 
    - id: cache-cargo
      name: Restore cargo cache if exists
      uses: actions/cache@v3
      with:
        path: ${{ env.CARGO_CACHE_PATH }}
        key: ${{ runner.os }}-cargo-${{ env.CACHE_VERSION }}-${{ hashFiles('**/Cargo.lock') }}
    - run: cargo build-dependencies
    - run: cargo check
    - name: Make '~/.cargo/git/db' in case git repositories are not used
      run:  mkdir -p ~/.cargo/git/db  
    - run: ls -1lh ~/.cargo/registry/index/
    - run: ls -1lh ~/.cargo/registry/cache/
    - run: ls -1lh ~/.cargo/git/db/
    - run: ls -1lh target/   
  
  build:
    needs: [dependencies]
    runs-on: ubuntu-latest
    steps:
     - run: export RUSTFLAGS="${{ env.RUSTFLAGS }}"
     - id: cache-rustup
       name: Obtain Rust toolchain
       uses: actions/cache/restore@v3
       with:
         path: ${{ env.RUSTUP_CACHE_PATH }}
         key: toolchain-${{ env.RUST_UP_DEFAULT }}-v${{ env.CACHE_VERSION }}-
     - if: ${{ steps.cache-rustup.outputs.cache-hit != 'true' }}
       run: echo 'Failed to retrieve cache';exit 1
     - id: cache-cargo
       name: Set up cargo cache
       uses: actions/cache/restore@v3
       continue-on-error: false
       with:
         path: ${{ env.CARGO_CACHE_PATH }}
         key: ${{ runner.os }}-cargo-${{ env.CACHE_VERSION }}-${{ hashFiles('**/Cargo.lock') }}
     - run: echo steps.cache-cargo.outputs.cache-hit := ${{ steps.cache-cargo.outputs.cache-hit }}
     - if: ${{ steps.cache-cargo.outputs.cache-hit != 'true' }}
       run: echo 'Failed to retrieve cargo cache';exit 1  
     - if: ${{ !env.ACT }}
       name: Cache Rust compilation
       uses: metalbear-co/sccache-action@v1.1.0
       with:
         github-token: ${{ secrets.GITHUB_TOKEN }}
      # The actual job
     - uses: actions/checkout@v4
     - name: cargo build
       run: cargo build
     - name: Run tests
       run: cargo test run
         
  fmt:
    needs: [rustup]
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
    steps:
      - id: cache-rustup
        name: Obtain Rust toolchain
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.RUSTUP_CACHE_PATH }}
          key: toolchain-${{ env.RUST_UP_DEFAULT }}-v${{ env.CACHE_VERSION }}-
      - if: ${{ steps.cache-rustup.outputs.cache-hit != 'true' }}
        run: echo 'Failed to retrieve cache';exit 1
      # The actual job
      - uses: actions/checkout@v4 
      - name: Fmt
        run: cargo fmt --all -- --check

  clippy:
    needs: [build]
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
    steps:
      - run: export RUSTFLAGS="${{ env.RUSTFLAGS }}"
      - id: cache-rustup
        name: Obtain Rust toolchain
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.RUSTUP_CACHE_PATH }}
          key: toolchain-${{ env.RUST_UP_DEFAULT }}-v${{ env.CACHE_VERSION }}-
      - if: ${{ steps.cache-rustup.outputs.cache-hit != 'true' }}
        run: echo 'Failed to retrieve cache';exit 1
      - id: cache-cargo
        name: Set up cargo cache
        uses: actions/cache/restore@v3
        continue-on-error: false
        with:
          path: ${{ env.CARGO_CACHE_PATH }}
          key: ${{ runner.os }}-cargo-${{ env.CACHE_VERSION }}-${{ hashFiles('**/Cargo.lock') }}
      - run: echo steps.cache-cargo.outputs.cache-hit := ${{ steps.cache-cargo.outputs.cache-hit }}
      - if: ${{ steps.cache-cargo.outputs.cache-hit != 'true' }}
        run: echo 'Failed to retrieve cargo cache';exit 1  
      # The actual job
      - uses: actions/checkout@v4
      - name: Clippy
        run: cargo clippy -- -D warnings

        
  coverage:
    needs: [build]
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
    steps:
      - run: export RUSTFLAGS="${{ env.RUSTFLAGS }}"
      - id: cache-rustup
        name: Obtain Rust toolchain
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.RUSTUP_CACHE_PATH }}
          key: toolchain-${{ env.RUST_UP_DEFAULT }}-v${{ env.CACHE_VERSION }}-
      - if: ${{ steps.cache-rustup.outputs.cache-hit != 'true' }}
        run: echo 'Failed to retrieve cache';exit 1
      - id: cache-cargo
        name: Set up cargo cache
        uses: actions/cache/restore@v3
        continue-on-error: false
        with:
          path: ${{ env.CARGO_CACHE_PATH }}
          key: ${{ runner.os }}-cargo-${{ env.CACHE_VERSION }}-${{ hashFiles('**/Cargo.lock') }}
      - if: ${{ steps.cache-cargo.outputs.cache-hit != 'true' }}
        run: echo 'Failed to retrieve cargo cache';exit 1  
      - uses: actions/checkout@v4
      - run: cargo test
      - run: grcov . --binary-path target/debug/deps/ -s . -t lcov --ignore-not-existing --ignore '../**' --ignore '/*' -o ./lcov.info
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          files: lcov.info
      #    fail_ci_if_error: true    


